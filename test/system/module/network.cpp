#include <gtest/gtest.h>
#include "nn/debug/debug_utils.h"
#include "nn/modules/activation_registry.h"
#include "nn/modules/linear.h"
#include "nn/tensor/tensor_creator.h"

using namespace toytorch;

/*
import torch
import torch.nn as nn

def myprint(x):
    print(x)
    pass

class Model(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(4, 32)
        self.fc2 = nn.Linear(32, 8)
        self.fc3 = nn.Linear(8, 1)
        
        self.fc1.weight.data = torch.Tensor([[ 0.3173, -0.0457, -0.3385, -0.4776],
        [-0.0031,  0.2211, -0.1616, -0.1061],
        [ 0.2597, -0.1697,  0.1880, -0.3566],
        [-0.3279, -0.3903,  0.1951, -0.4160],
        [ 0.4730, -0.3368, -0.4094,  0.2629],
        [ 0.3205, -0.4298, -0.1652, -0.1459],
        [-0.3000, -0.3617, -0.2455, -0.1324],
        [ 0.1216,  0.2857, -0.1992, -0.1182],
        [ 0.1657,  0.1080, -0.3186, -0.1529],
        [-0.2510, -0.3278, -0.3418,  0.2390],
        [ 0.4950, -0.2400,  0.3878, -0.3343],
        [-0.1739,  0.3848, -0.0068, -0.3756],
        [-0.1457, -0.3460,  0.2038,  0.4148],
        [ 0.1531, -0.3727, -0.4315, -0.4000],
        [ 0.2726, -0.4051, -0.0932,  0.1861],
        [-0.3436, -0.1548, -0.1562,  0.4995],
        [-0.3390,  0.2835, -0.1717, -0.0910],
        [-0.3291,  0.0215, -0.4821, -0.3695],
        [-0.3421,  0.0126, -0.0259,  0.4028],
        [-0.1748,  0.3306, -0.1367,  0.1938],
        [ 0.3757, -0.4727,  0.0890, -0.0448],
        [-0.3240,  0.0643,  0.0061,  0.4736],
        [-0.2999,  0.4130,  0.0533,  0.0417],
        [-0.3771,  0.3930,  0.3802,  0.1297],
        [ 0.2495, -0.3965, -0.3119, -0.3681],
        [ 0.2883, -0.3488, -0.2022,  0.2522],
        [ 0.4270,  0.2086, -0.4924,  0.0259],
        [ 0.1099, -0.2605,  0.2342, -0.2240],
        [ 0.0988, -0.3694,  0.2008, -0.1704],
        [-0.0945, -0.3056, -0.3711, -0.2405],
        [-0.3654, -0.1763, -0.3004, -0.4042],
        [ 0.3139,  0.1107, -0.3582,  0.0527]])
        
        self.fc1.bias.data = torch.Tensor([0.2316,  0.2251,  0.2767, -0.3732, -0.3956, -0.3661, -0.3121, -0.3391,
         0.0534,  0.2162, -0.4004,  0.3733,  0.4137, -0.0613, -0.0404,  0.1998,
        -0.0595,  0.3345,  0.2651, -0.0886, -0.0843,  0.3578, -0.4431, -0.3891,
         0.2038, -0.2003,  0.0817,  0.4285,  0.3872, -0.2378, -0.3126,  0.2628])
    
        
        self.fc2.weight.data = torch.Tensor([[ 0.1047, -0.1732,  0.1721, -0.0818, -0.0574, -0.0237, -0.1674, -0.0251,
         -0.0898, -0.1737, -0.0754, -0.0321,  0.1018,  0.1645,  0.1335,  0.0526,
          0.1361, -0.0521,  0.1702, -0.1344, -0.0510, -0.0187, -0.1718, -0.1405,
          0.1190, -0.1074,  0.1490, -0.0745, -0.1141,  0.0550, -0.0461,  0.0524],
        [-0.1529, -0.0655, -0.1173, -0.1260, -0.0725, -0.0950, -0.0118, -0.1550,
         -0.1314, -0.0778, -0.1102, -0.0775,  0.0443,  0.0517,  0.1682,  0.0889,
          0.0799,  0.1228,  0.0705,  0.0324, -0.0361,  0.1479,  0.0652, -0.1634,
         -0.0732,  0.0524,  0.1710,  0.0854,  0.1584, -0.1391, -0.0439, -0.0586],
        [-0.1714,  0.1597,  0.0308,  0.0176, -0.0733, -0.1041,  0.0013, -0.1572,
          0.0664, -0.1728, -0.1186,  0.1467,  0.1431,  0.0342,  0.0325,  0.0127,
          0.0032,  0.0759, -0.1291,  0.1659,  0.0945, -0.0193, -0.0473, -0.0379,
          0.1220, -0.0103,  0.1237, -0.0606, -0.0055,  0.0133, -0.0764, -0.0771],
        [-0.0338,  0.0775,  0.0447,  0.0010,  0.0122, -0.1048,  0.1251, -0.1322,
         -0.0467, -0.1613,  0.1722,  0.1570, -0.1449,  0.0563,  0.0712,  0.0792,
          0.0484, -0.0175,  0.0450, -0.0069, -0.1617, -0.0444, -0.0176, -0.1240,
         -0.0382, -0.1151,  0.1338,  0.0114,  0.0127,  0.0482,  0.0522, -0.1665],
        [-0.0427,  0.1291, -0.0899,  0.0411, -0.0410, -0.0871, -0.0843,  0.0838,
          0.0526, -0.1441,  0.1698,  0.0394,  0.0702, -0.1074, -0.1094, -0.1040,
         -0.1543, -0.1605, -0.0919, -0.1762, -0.1253, -0.1338, -0.1305,  0.1661,
         -0.0589, -0.1621,  0.1173,  0.0303,  0.0548, -0.0256, -0.1033,  0.0605],
        [ 0.1316, -0.0681,  0.1654, -0.0859,  0.1205,  0.1115, -0.1557, -0.1028,
          0.0380, -0.0066,  0.1132,  0.0948, -0.1219, -0.0234, -0.1596, -0.1047,
          0.1212,  0.1671, -0.1202,  0.1129,  0.0992,  0.1191,  0.0547,  0.0929,
         -0.1613, -0.0520,  0.0031,  0.1106, -0.0911,  0.1565, -0.0903, -0.1005],
        [ 0.1530, -0.0029, -0.0685,  0.1110, -0.0679,  0.0179, -0.1642, -0.1250,
          0.1129, -0.0030,  0.0200,  0.1197, -0.1102, -0.0796, -0.1447, -0.1429,
          0.1214, -0.1539, -0.0210,  0.0728,  0.0617,  0.1223, -0.1033,  0.0166,
         -0.1625,  0.0005, -0.0002, -0.1004, -0.1351,  0.0529, -0.1367, -0.0810],
        [ 0.0421,  0.1711, -0.1640, -0.0892, -0.0667,  0.0786, -0.0860, -0.0115,
          0.0798,  0.1624,  0.1154,  0.1187, -0.0284,  0.0121,  0.0902,  0.0179,
         -0.0026, -0.1395,  0.0755, -0.1005,  0.0332,  0.1590, -0.1619,  0.0891,
         -0.0470, -0.0156, -0.1236,  0.1463, -0.0599,  0.0637,  0.0814,  0.0644]])
        
        self.fc2.bias.data = torch.Tensor([ 0.1302,  0.1344, -0.1278, -0.1445, -0.1724,  0.0744,  0.0091, -0.1367])
        
        self.fc3.weight.data = torch.Tensor([[ 0.0705,  0.2801, -0.0278,  0.1603,  0.3234,  0.2843,  0.0699, -0.1005]])
        
        self.fc3.bias.data = torch.Tensor([0.0109])
        
#         self.fc1.weight.requires_grad = True
#         self.fc1.bias.requires_grad = True
#         self.fc2.weight.requires_grad = True
#         self.fc2.bias.requires_grad = True
#         self.fc3.weight.requires_grad = True
#         self.fc3.bias.requires_grad = True
        
#         print("linear 1")
#         print(self.fc1.weight.T)
#         print(self.fc1.bias)
        
#         print("linear 2")
#         print(self.fc2.weight.T)
#         print(self.fc2.bias)
        
#         print("linear 3")
#         print(self.fc3.weight.T)
#         print(self.fc3.bias)
        
    def forward(self, x):
        
        myprint("====fc1 out====")
        out = self.fc1(x)
        myprint(out)
        out = torch.sigmoid(out)
        myprint(out)
        
        myprint("====fc2 out====")
        out = self.fc2(out)
        myprint(out)
        
        out = torch.relu(out)
        myprint(out)
        
        myprint("====fc3 out====")
    
        out = self.fc3(out)
        myprint(out)
        
        out = torch.sigmoid(out)
        myprint(out)
        
        return out
        
        
model = Model()
input = torch.ones(5, 4)
result = model(input)

result_sum = result.sum()

print(result_sum)

result_sum.backward()

myprint("====fc1 W grad out====")
print(model.fc1.weight.grad.T)

myprint("====fc1 B grad out====")
print(model.fc1.bias.grad)

myprint("====fc2 W grad out====")
print(model.fc2.weight.grad.T)

myprint("====fc2 B grad out====")
print(model.fc2.bias.grad)

myprint("====fc3 W grad out====")
print(model.fc3.weight.grad.T)

myprint("====fc3 B grad out====")
print(model.fc3.bias.grad)

====fc1 out====
tensor([[-0.3129,  0.1754,  0.1981, -1.3123, -0.4059, -0.7865, -1.3517, -0.2492,
         -0.1444, -0.4654, -0.0919,  0.2018,  0.5406, -1.1124, -0.0800,  0.0447,
         -0.3777, -0.8247,  0.3125,  0.1243, -0.1371,  0.5778, -0.2350,  0.1367,
         -0.6232, -0.2108,  0.2508,  0.2881,  0.1470, -1.2495, -1.5589,  0.3819],
        [-0.3129,  0.1754,  0.1981, -1.3123, -0.4059, -0.7865, -1.3517, -0.2492,
         -0.1444, -0.4654, -0.0919,  0.2018,  0.5406, -1.1124, -0.0800,  0.0447,
         -0.3777, -0.8247,  0.3125,  0.1243, -0.1371,  0.5778, -0.2350,  0.1367,
         -0.6232, -0.2108,  0.2508,  0.2881,  0.1470, -1.2495, -1.5589,  0.3819],
        [-0.3129,  0.1754,  0.1981, -1.3123, -0.4059, -0.7865, -1.3517, -0.2492,
         -0.1444, -0.4654, -0.0919,  0.2018,  0.5406, -1.1124, -0.0800,  0.0447,
         -0.3777, -0.8247,  0.3125,  0.1243, -0.1371,  0.5778, -0.2350,  0.1367,
         -0.6232, -0.2108,  0.2508,  0.2881,  0.1470, -1.2495, -1.5589,  0.3819],
        [-0.3129,  0.1754,  0.1981, -1.3123, -0.4059, -0.7865, -1.3517, -0.2492,
         -0.1444, -0.4654, -0.0919,  0.2018,  0.5406, -1.1124, -0.0800,  0.0447,
         -0.3777, -0.8247,  0.3125,  0.1243, -0.1371,  0.5778, -0.2350,  0.1367,
         -0.6232, -0.2108,  0.2508,  0.2881,  0.1470, -1.2495, -1.5589,  0.3819],
        [-0.3129,  0.1754,  0.1981, -1.3123, -0.4059, -0.7865, -1.3517, -0.2492,
         -0.1444, -0.4654, -0.0919,  0.2018,  0.5406, -1.1124, -0.0800,  0.0447,
         -0.3777, -0.8247,  0.3125,  0.1243, -0.1371,  0.5778, -0.2350,  0.1367,
         -0.6232, -0.2108,  0.2508,  0.2881,  0.1470, -1.2495, -1.5589,  0.3819]],
       grad_fn=<AddmmBackward0>)
tensor([[0.4224, 0.5437, 0.5494, 0.2121, 0.3999, 0.3129, 0.2056, 0.4380, 0.4640,
         0.3857, 0.4770, 0.5503, 0.6320, 0.2474, 0.4800, 0.5112, 0.4067, 0.3048,
         0.5775, 0.5310, 0.4658, 0.6406, 0.4415, 0.5341, 0.3491, 0.4475, 0.5624,
         0.5715, 0.5367, 0.2228, 0.1738, 0.5943],
        [0.4224, 0.5437, 0.5494, 0.2121, 0.3999, 0.3129, 0.2056, 0.4380, 0.4640,
         0.3857, 0.4770, 0.5503, 0.6320, 0.2474, 0.4800, 0.5112, 0.4067, 0.3048,
         0.5775, 0.5310, 0.4658, 0.6406, 0.4415, 0.5341, 0.3491, 0.4475, 0.5624,
         0.5715, 0.5367, 0.2228, 0.1738, 0.5943],
        [0.4224, 0.5437, 0.5494, 0.2121, 0.3999, 0.3129, 0.2056, 0.4380, 0.4640,
         0.3857, 0.4770, 0.5503, 0.6320, 0.2474, 0.4800, 0.5112, 0.4067, 0.3048,
         0.5775, 0.5310, 0.4658, 0.6406, 0.4415, 0.5341, 0.3491, 0.4475, 0.5624,
         0.5715, 0.5367, 0.2228, 0.1738, 0.5943],
        [0.4224, 0.5437, 0.5494, 0.2121, 0.3999, 0.3129, 0.2056, 0.4380, 0.4640,
         0.3857, 0.4770, 0.5503, 0.6320, 0.2474, 0.4800, 0.5112, 0.4067, 0.3048,
         0.5775, 0.5310, 0.4658, 0.6406, 0.4415, 0.5341, 0.3491, 0.4475, 0.5624,
         0.5715, 0.5367, 0.2228, 0.1738, 0.5943],
        [0.4224, 0.5437, 0.5494, 0.2121, 0.3999, 0.3129, 0.2056, 0.4380, 0.4640,
         0.3857, 0.4770, 0.5503, 0.6320, 0.2474, 0.4800, 0.5112, 0.4067, 0.3048,
         0.5775, 0.5310, 0.4658, 0.6406, 0.4415, 0.5341, 0.3491, 0.4475, 0.5624,
         0.5715, 0.5367, 0.2228, 0.1738, 0.5943]], grad_fn=<SigmoidBackward0>)
====fc2 out====
tensor([[ 0.0040,  0.0965, -0.0716, -0.2668, -0.5409,  0.2629, -0.3045,  0.1631],
        [ 0.0040,  0.0965, -0.0716, -0.2668, -0.5409,  0.2629, -0.3045,  0.1631],
        [ 0.0040,  0.0965, -0.0716, -0.2668, -0.5409,  0.2629, -0.3045,  0.1631],
        [ 0.0040,  0.0965, -0.0716, -0.2668, -0.5409,  0.2629, -0.3045,  0.1631],
        [ 0.0040,  0.0965, -0.0716, -0.2668, -0.5409,  0.2629, -0.3045,  0.1631]],
       grad_fn=<AddmmBackward0>)
tensor([[0.0040, 0.0965, 0.0000, 0.0000, 0.0000, 0.2629, 0.0000, 0.1631],
        [0.0040, 0.0965, 0.0000, 0.0000, 0.0000, 0.2629, 0.0000, 0.1631],
        [0.0040, 0.0965, 0.0000, 0.0000, 0.0000, 0.2629, 0.0000, 0.1631],
        [0.0040, 0.0965, 0.0000, 0.0000, 0.0000, 0.2629, 0.0000, 0.1631],
        [0.0040, 0.0965, 0.0000, 0.0000, 0.0000, 0.2629, 0.0000, 0.1631]],
       grad_fn=<ReluBackward0>)
====fc3 out====
tensor([[0.0966],
        [0.0966],
        [0.0966],
        [0.0966],
        [0.0966]], grad_fn=<AddmmBackward0>)
tensor([[0.5241],
        [0.5241],
        [0.5241],
        [0.5241],
        [0.5241]], grad_fn=<SigmoidBackward0>)
tensor(2.6206, grad_fn=<SumBackward0>)
====fc1 W grad out====
tensor([[-0.0007, -0.0208,  0.0132, -0.0118,  0.0050, -0.0012, -0.0103, -0.0225,
         -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,  0.0042,  0.0006, -0.0009,
          0.0201,  0.0244, -0.0030,  0.0130,  0.0035,  0.0167,  0.0117, -0.0119,
         -0.0151, -0.0019,  0.0220,  0.0108,  0.0051,  0.0006, -0.0088, -0.0144],
        [-0.0007, -0.0208,  0.0132, -0.0118,  0.0050, -0.0012, -0.0103, -0.0225,
         -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,  0.0042,  0.0006, -0.0009,
          0.0201,  0.0244, -0.0030,  0.0130,  0.0035,  0.0167,  0.0117, -0.0119,
         -0.0151, -0.0019,  0.0220,  0.0108,  0.0051,  0.0006, -0.0088, -0.0144],
        [-0.0007, -0.0208,  0.0132, -0.0118,  0.0050, -0.0012, -0.0103, -0.0225,
         -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,  0.0042,  0.0006, -0.0009,
          0.0201,  0.0244, -0.0030,  0.0130,  0.0035,  0.0167,  0.0117, -0.0119,
         -0.0151, -0.0019,  0.0220,  0.0108,  0.0051,  0.0006, -0.0088, -0.0144],
        [-0.0007, -0.0208,  0.0132, -0.0118,  0.0050, -0.0012, -0.0103, -0.0225,
         -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,  0.0042,  0.0006, -0.0009,
          0.0201,  0.0244, -0.0030,  0.0130,  0.0035,  0.0167,  0.0117, -0.0119,
         -0.0151, -0.0019,  0.0220,  0.0108,  0.0051,  0.0006, -0.0088, -0.0144]])
====fc1 B grad out====
tensor([-0.0007, -0.0208,  0.0132, -0.0118,  0.0050, -0.0012, -0.0103, -0.0225,
        -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,  0.0042,  0.0006, -0.0009,
         0.0201,  0.0244, -0.0030,  0.0130,  0.0035,  0.0167,  0.0117, -0.0119,
        -0.0151, -0.0019,  0.0220,  0.0108,  0.0051,  0.0006, -0.0088, -0.0144])
====fc2 W grad out====
tensor([[ 0.0371,  0.1476,  0.0000,  0.0000,  0.0000,  0.1498,  0.0000, -0.0529],
        [ 0.0478,  0.1899,  0.0000,  0.0000,  0.0000,  0.1928,  0.0000, -0.0681],
        [ 0.0483,  0.1919,  0.0000,  0.0000,  0.0000,  0.1948,  0.0000, -0.0689],
        [ 0.0186,  0.0741,  0.0000,  0.0000,  0.0000,  0.0752,  0.0000, -0.0266],
        [ 0.0352,  0.1397,  0.0000,  0.0000,  0.0000,  0.1418,  0.0000, -0.0501],
        [ 0.0275,  0.1093,  0.0000,  0.0000,  0.0000,  0.1109,  0.0000, -0.0392],
        [ 0.0181,  0.0718,  0.0000,  0.0000,  0.0000,  0.0729,  0.0000, -0.0258],
        [ 0.0385,  0.1530,  0.0000,  0.0000,  0.0000,  0.1553,  0.0000, -0.0549],
        [ 0.0408,  0.1621,  0.0000,  0.0000,  0.0000,  0.1645,  0.0000, -0.0581],
        [ 0.0339,  0.1347,  0.0000,  0.0000,  0.0000,  0.1368,  0.0000, -0.0483],
        [ 0.0419,  0.1666,  0.0000,  0.0000,  0.0000,  0.1691,  0.0000, -0.0598],
        [ 0.0484,  0.1922,  0.0000,  0.0000,  0.0000,  0.1951,  0.0000, -0.0690],
        [ 0.0556,  0.2207,  0.0000,  0.0000,  0.0000,  0.2241,  0.0000, -0.0792],
        [ 0.0218,  0.0864,  0.0000,  0.0000,  0.0000,  0.0877,  0.0000, -0.0310],
        [ 0.0422,  0.1677,  0.0000,  0.0000,  0.0000,  0.1702,  0.0000, -0.0602],
        [ 0.0449,  0.1786,  0.0000,  0.0000,  0.0000,  0.1812,  0.0000, -0.0641],
        [ 0.0358,  0.1421,  0.0000,  0.0000,  0.0000,  0.1442,  0.0000, -0.0510],
        [ 0.0268,  0.1065,  0.0000,  0.0000,  0.0000,  0.1081,  0.0000, -0.0382],
        [ 0.0508,  0.2017,  0.0000,  0.0000,  0.0000,  0.2047,  0.0000, -0.0724],
        [ 0.0467,  0.1855,  0.0000,  0.0000,  0.0000,  0.1883,  0.0000, -0.0666],
        [ 0.0410,  0.1627,  0.0000,  0.0000,  0.0000,  0.1651,  0.0000, -0.0584],
        [ 0.0563,  0.2238,  0.0000,  0.0000,  0.0000,  0.2271,  0.0000, -0.0803],
        [ 0.0388,  0.1542,  0.0000,  0.0000,  0.0000,  0.1565,  0.0000, -0.0553],
        [ 0.0470,  0.1866,  0.0000,  0.0000,  0.0000,  0.1894,  0.0000, -0.0669],
        [ 0.0307,  0.1219,  0.0000,  0.0000,  0.0000,  0.1238,  0.0000, -0.0437],
        [ 0.0393,  0.1563,  0.0000,  0.0000,  0.0000,  0.1587,  0.0000, -0.0561],
        [ 0.0494,  0.1964,  0.0000,  0.0000,  0.0000,  0.1994,  0.0000, -0.0705],
        [ 0.0502,  0.1996,  0.0000,  0.0000,  0.0000,  0.2026,  0.0000, -0.0716],
        [ 0.0472,  0.1875,  0.0000,  0.0000,  0.0000,  0.1903,  0.0000, -0.0673],
        [ 0.0196,  0.0778,  0.0000,  0.0000,  0.0000,  0.0790,  0.0000, -0.0279],
        [ 0.0153,  0.0607,  0.0000,  0.0000,  0.0000,  0.0616,  0.0000, -0.0218],
        [ 0.0523,  0.2076,  0.0000,  0.0000,  0.0000,  0.2107,  0.0000, -0.0745]])
====fc2 B grad out====
tensor([ 0.0879,  0.3493,  0.0000,  0.0000,  0.0000,  0.3545,  0.0000, -0.1253])
====fc3 W grad out====
tensor([[0.0050],
        [0.1203],
        [0.0000],
        [0.0000],
        [0.0000],
        [0.3279],
        [0.0000],
        [0.2034]])
====fc3 B grad out====
tensor([1.2471])
*/

TEST(AugogradSystemTest, LinearModel) {


  Linear fc1(4, 32, "Sigmoid", "fc1");
  Linear fc2(32, 8, "Relu", "fc2");
  Linear fc3(8, 1, "Sigmoid", "fc3");

  fc1.debug_set_weights(Tensor(
      {4, 32},
      {{0.3173,  -0.0031, 0.2597,  -0.3279, 0.4730,  0.3205,  -0.3000, 0.1216,
        0.1657,  -0.2510, 0.4950,  -0.1739, -0.1457, 0.1531,  0.2726,  -0.3436,
        -0.3390, -0.3291, -0.3421, -0.1748, 0.3757,  -0.3240, -0.2999, -0.3771,
        0.2495,  0.2883,  0.4270,  0.1099,  0.0988,  -0.0945, -0.3654, 0.3139,
        -0.0457, 0.2211,  -0.1697, -0.3903, -0.3368, -0.4298, -0.3617, 0.2857,
        0.1080,  -0.3278, -0.2400, 0.3848,  -0.3460, -0.3727, -0.4051, -0.1548,
        0.2835,  0.0215,  0.0126,  0.3306,  -0.4727, 0.0643,  0.4130,  0.3930,
        -0.3965, -0.3488, 0.2086,  -0.2605, -0.3694, -0.3056, -0.1763, 0.1107,
        -0.3385, -0.1616, 0.1880,  0.1951,  -0.4094, -0.1652, -0.2455, -0.1992,
        -0.3186, -0.3418, 0.3878,  -0.0068, 0.2038,  -0.4315, -0.0932, -0.1562,
        -0.1717, -0.4821, -0.0259, -0.1367, 0.0890,  0.0061,  0.0533,  0.3802,
        -0.3119, -0.2022, -0.4924, 0.2342,  0.2008,  -0.3711, -0.3004, -0.3582,
        -0.4776, -0.1061, -0.3566, -0.4160, 0.2629,  -0.1459, -0.1324, -0.1182,
        -0.1529, 0.2390,  -0.3343, -0.3756, 0.4148,  -0.4000, 0.1861,  0.4995,
        -0.0910, -0.3695, 0.4028,  0.1938,  -0.0448, 0.4736,  0.0417,  0.1297,
        -0.3681, 0.2522,  0.0259,  -0.2240, -0.1704, -0.2405, -0.4042, 0.0527}},
      true));

  fc1.debug_set_bias(Tensor(
      {1, 32},
      {0.2316,  0.2251,  0.2767,  -0.3732, -0.3956, -0.3661, -0.3121, -0.3391,
       0.0534,  0.2162,  -0.4004, 0.3733,  0.4137,  -0.0613, -0.0404, 0.1998,
       -0.0595, 0.3345,  0.2651,  -0.0886, -0.0843, 0.3578,  -0.4431, -0.3891,
       0.2038,  -0.2003, 0.0817,  0.4285,  0.3872,  -0.2378, -0.3126, 0.2628},
      true));

  fc2.debug_set_weights(Tensor(
      {32, 8},
      {0.1047,  -0.1529, -0.1714, -0.0338, -0.0427, 0.1316,  0.1530,  0.0421,
       -0.1732, -0.0655, 0.1597,  0.0775,  0.1291,  -0.0681, -0.0029, 0.1711,
       0.1721,  -0.1173, 0.0308,  0.0447,  -0.0899, 0.1654,  -0.0685, -0.1640,
       -0.0818, -0.1260, 0.0176,  0.0010,  0.0411,  -0.0859, 0.1110,  -0.0892,
       -0.0574, -0.0725, -0.0733, 0.0122,  -0.0410, 0.1205,  -0.0679, -0.0667,
       -0.0237, -0.0950, -0.1041, -0.1048, -0.0871, 0.1115,  0.0179,  0.0786,
       -0.1674, -0.0118, 0.0013,  0.1251,  -0.0843, -0.1557, -0.1642, -0.0860,
       -0.0251, -0.1550, -0.1572, -0.1322, 0.0838,  -0.1028, -0.1250, -0.0115,
       -0.0898, -0.1314, 0.0664,  -0.0467, 0.0526,  0.0380,  0.1129,  0.0798,
       -0.1737, -0.0778, -0.1728, -0.1613, -0.1441, -0.0066, -0.0030, 0.1624,
       -0.0754, -0.1102, -0.1186, 0.1722,  0.1698,  0.1132,  0.0200,  0.1154,
       -0.0321, -0.0775, 0.1467,  0.1570,  0.0394,  0.0948,  0.1197,  0.1187,
       0.1018,  0.0443,  0.1431,  -0.1449, 0.0702,  -0.1219, -0.1102, -0.0284,
       0.1645,  0.0517,  0.0342,  0.0563,  -0.1074, -0.0234, -0.0796, 0.0121,
       0.1335,  0.1682,  0.0325,  0.0712,  -0.1094, -0.1596, -0.1447, 0.0902,
       0.0526,  0.0889,  0.0127,  0.0792,  -0.1040, -0.1047, -0.1429, 0.0179,
       0.1361,  0.0799,  0.0032,  0.0484,  -0.1543, 0.1212,  0.1214,  -0.0026,
       -0.0521, 0.1228,  0.0759,  -0.0175, -0.1605, 0.1671,  -0.1539, -0.1395,
       0.1702,  0.0705,  -0.1291, 0.0450,  -0.0919, -0.1202, -0.0210, 0.0755,
       -0.1344, 0.0324,  0.1659,  -0.0069, -0.1762, 0.1129,  0.0728,  -0.1005,
       -0.0510, -0.0361, 0.0945,  -0.1617, -0.1253, 0.0992,  0.0617,  0.0332,
       -0.0187, 0.1479,  -0.0193, -0.0444, -0.1338, 0.1191,  0.1223,  0.1590,
       -0.1718, 0.0652,  -0.0473, -0.0176, -0.1305, 0.0547,  -0.1033, -0.1619,
       -0.1405, -0.1634, -0.0379, -0.1240, 0.1661,  0.0929,  0.0166,  0.0891,
       0.1190,  -0.0732, 0.1220,  -0.0382, -0.0589, -0.1613, -0.1625, -0.0470,
       -0.1074, 0.0524,  -0.0103, -0.1151, -0.1621, -0.0520, 0.0005,  -0.0156,
       0.1490,  0.1710,  0.1237,  0.1338,  0.1173,  0.0031,  -0.0002, -0.1236,
       -0.0745, 0.0854,  -0.0606, 0.0114,  0.0303,  0.1106,  -0.1004, 0.1463,
       -0.1141, 0.1584,  -0.0055, 0.0127,  0.0548,  -0.0911, -0.1351, -0.0599,
       0.0550,  -0.1391, 0.0133,  0.0482,  -0.0256, 0.1565,  0.0529,  0.0637,
       -0.0461, -0.0439, -0.0764, 0.0522,  -0.1033, -0.0903, -0.1367, 0.0814,
       0.0524,  -0.0586, -0.0771, -0.1665, 0.0605,  -0.1005, -0.0810, 0.0644},
      true));

  fc2.debug_set_bias(Tensor(
      {1, 8},
      {0.1302, 0.1344, -0.1278, -0.1445, -0.1724, 0.0744, 0.0091, -0.1367},
      true));

  fc3.debug_set_weights(
      Tensor({8, 1},
             {0.0705, 0.2801, -0.0278, 0.1603, 0.3234, 0.2843, 0.0699, -0.1005},
             true));

  fc3.debug_set_bias(Tensor({1, 1}, 0.0109, true));

  Tensor input = ones({5, 4});

  Tensor result = fc1.forward(input);
  // std::cout << "====fc1 out===" << std::endl;
  // result.print();

  // std::cout << "====fc2 out===" << std::endl;
  result = fc2.forward(result);
  // result.print();

  // std::cout << "====fc3 out===" << std::endl;
  result = fc3.forward(result);
  // result.print();

  // std::cout << "====result sum===" << std::endl;

  result = result.sum();

  // result.print();

//   std::cout << debug::print_backward_graph(result) << std::endl;

  result.backward();

  // std::cout << "====f1 grad w===" << std::endl;
  // fc1.weights().grad()->print();

  // std::cout << "====f1 grad B===" << std::endl;
  // fc1.bias().grad()->print();

  // std::cout << "====f2 grad W===" << std::endl;
  // fc2.weights().grad()->print();

  // std::cout << "====f2 grad B===" << std::endl;
  // fc2.bias().grad()->print();

  // std::cout << "====f3 grad W===" << std::endl;
  // fc3.weights().grad()->print();

  // std::cout << "====f3 grad B===" << std::endl;
  // fc3.bias().grad()->print();

  EXPECT_TRUE(fc1.weights().grad()->strict_allclose(
      Tensor({4, 32},
             {-0.0007, -0.0208, 0.0132,  -0.0118, 0.0050,  -0.0012, -0.0103,
              -0.0225, -0.0125, -0.0154, -0.0049, -0.0028, -0.0035, 0.0042,
              0.0006,  -0.0009, 0.0201,  0.0244,  -0.0030, 0.0130,  0.0035,
              0.0167,  0.0117,  -0.0119, -0.0151, -0.0019, 0.0220,  0.0108,
              0.0051,  0.0006,  -0.0088, -0.0144, -0.0007, -0.0208, 0.0132,
              -0.0118, 0.0050,  -0.0012, -0.0103, -0.0225, -0.0125, -0.0154,
              -0.0049, -0.0028, -0.0035, 0.0042,  0.0006,  -0.0009, 0.0201,
              0.0244,  -0.0030, 0.0130,  0.0035,  0.0167,  0.0117,  -0.0119,
              -0.0151, -0.0019, 0.0220,  0.0108,  0.0051,  0.0006,  -0.0088,
              -0.0144, -0.0007, -0.0208, 0.0132,  -0.0118, 0.0050,  -0.0012,
              -0.0103, -0.0225, -0.0125, -0.0154, -0.0049, -0.0028, -0.0035,
              0.0042,  0.0006,  -0.0009, 0.0201,  0.0244,  -0.0030, 0.0130,
              0.0035,  0.0167,  0.0117,  -0.0119, -0.0151, -0.0019, 0.0220,
              0.0108,  0.0051,  0.0006,  -0.0088, -0.0144, -0.0007, -0.0208,
              0.0132,  -0.0118, 0.0050,  -0.0012, -0.0103, -0.0225, -0.0125,
              -0.0154, -0.0049, -0.0028, -0.0035, 0.0042,  0.0006,  -0.0009,
              0.0201,  0.0244,  -0.0030, 0.0130,  0.0035,  0.0167,  0.0117,
              -0.0119, -0.0151, -0.0019, 0.0220,  0.0108,  0.0051,  0.0006,
              -0.0088, -0.0144}),
      1e-2, 1e-4));

  EXPECT_TRUE(fc1.bias().grad()->strict_allclose(
      Tensor({1, 32},
             {-0.0007, -0.0208, 0.0132,  -0.0118, 0.0050,  -0.0012, -0.0103,
              -0.0225, -0.0125, -0.0154, -0.0049, -0.0028, -0.0035, 0.0042,
              0.0006,  -0.0009, 0.0201,  0.0244,  -0.0030, 0.0130,  0.0035,
              0.0167,  0.0117,  -0.0119, -0.0151, -0.0019, 0.0220,  0.0108,
              0.0051,  0.0006,  -0.0088, -0.0144}),
      1e-2, 1e-4));

  EXPECT_TRUE(fc2.weights().grad()->strict_allclose(
      Tensor({32, 8},
             {0.0371, 0.1476, 0.0000, 0.0000, 0.0000, 0.1498, 0.0000, -0.0529,
              0.0478, 0.1899, 0.0000, 0.0000, 0.0000, 0.1928, 0.0000, -0.0681,
              0.0483, 0.1919, 0.0000, 0.0000, 0.0000, 0.1948, 0.0000, -0.0689,
              0.0186, 0.0741, 0.0000, 0.0000, 0.0000, 0.0752, 0.0000, -0.0266,
              0.0352, 0.1397, 0.0000, 0.0000, 0.0000, 0.1418, 0.0000, -0.0501,
              0.0275, 0.1093, 0.0000, 0.0000, 0.0000, 0.1109, 0.0000, -0.0392,
              0.0181, 0.0718, 0.0000, 0.0000, 0.0000, 0.0729, 0.0000, -0.0258,
              0.0385, 0.1530, 0.0000, 0.0000, 0.0000, 0.1553, 0.0000, -0.0549,
              0.0408, 0.1621, 0.0000, 0.0000, 0.0000, 0.1645, 0.0000, -0.0581,
              0.0339, 0.1347, 0.0000, 0.0000, 0.0000, 0.1368, 0.0000, -0.0483,
              0.0419, 0.1666, 0.0000, 0.0000, 0.0000, 0.1691, 0.0000, -0.0598,
              0.0484, 0.1922, 0.0000, 0.0000, 0.0000, 0.1951, 0.0000, -0.0690,
              0.0556, 0.2207, 0.0000, 0.0000, 0.0000, 0.2241, 0.0000, -0.0792,
              0.0218, 0.0864, 0.0000, 0.0000, 0.0000, 0.0877, 0.0000, -0.0310,
              0.0422, 0.1677, 0.0000, 0.0000, 0.0000, 0.1702, 0.0000, -0.0602,
              0.0449, 0.1786, 0.0000, 0.0000, 0.0000, 0.1812, 0.0000, -0.0641,
              0.0358, 0.1421, 0.0000, 0.0000, 0.0000, 0.1442, 0.0000, -0.0510,
              0.0268, 0.1065, 0.0000, 0.0000, 0.0000, 0.1081, 0.0000, -0.0382,
              0.0508, 0.2017, 0.0000, 0.0000, 0.0000, 0.2047, 0.0000, -0.0724,
              0.0467, 0.1855, 0.0000, 0.0000, 0.0000, 0.1883, 0.0000, -0.0666,
              0.0410, 0.1627, 0.0000, 0.0000, 0.0000, 0.1651, 0.0000, -0.0584,
              0.0563, 0.2238, 0.0000, 0.0000, 0.0000, 0.2271, 0.0000, -0.0803,
              0.0388, 0.1542, 0.0000, 0.0000, 0.0000, 0.1565, 0.0000, -0.0553,
              0.0470, 0.1866, 0.0000, 0.0000, 0.0000, 0.1894, 0.0000, -0.0669,
              0.0307, 0.1219, 0.0000, 0.0000, 0.0000, 0.1238, 0.0000, -0.0437,
              0.0393, 0.1563, 0.0000, 0.0000, 0.0000, 0.1587, 0.0000, -0.0561,
              0.0494, 0.1964, 0.0000, 0.0000, 0.0000, 0.1994, 0.0000, -0.0705,
              0.0502, 0.1996, 0.0000, 0.0000, 0.0000, 0.2026, 0.0000, -0.0716,
              0.0472, 0.1875, 0.0000, 0.0000, 0.0000, 0.1903, 0.0000, -0.0673,
              0.0196, 0.0778, 0.0000, 0.0000, 0.0000, 0.0790, 0.0000, -0.0279,
              0.0153, 0.0607, 0.0000, 0.0000, 0.0000, 0.0616, 0.0000, -0.0218,
              0.0523, 0.2076, 0.0000, 0.0000, 0.0000, 0.2107, 0.0000, -0.0745}),
      1e-2, 1e-4));

  EXPECT_TRUE(fc2.bias().grad()->strict_allclose(
      Tensor({1, 8},
             {0.0879, 0.3493, 0.0000, 0.0000, 0.0000, 0.3545, 0.0000, -0.1253}),
      1e-2, 1e-4));

  EXPECT_TRUE(fc3.weights().grad()->strict_allclose(
      Tensor({8, 1},
             {0.0050, 0.1203, 0.0000, 0.0000, 0.0000, 0.3279, 0.0000, 0.2034}),
      1e-2, 1e-4));

  EXPECT_TRUE(
      fc3.bias().grad()->strict_allclose(Tensor({1, 1}, 1.2471), 1e-2, 1e-4));
}